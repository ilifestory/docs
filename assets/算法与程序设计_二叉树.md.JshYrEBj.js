import{_ as n,c as a,o as l,a4 as p,eS as s,eT as e,eU as o,eV as r}from"./chunks/framework.CCJHkvW2.js";const m=JSON.parse('{"title":"二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"算法与程序设计/二叉树.md","filePath":"算法与程序设计/二叉树.md","lastUpdated":1708482714000}'),c={name:"算法与程序设计/二叉树.md"},t=p('<h1 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h1><h2 id="二叉树前序遍历" tabindex="-1">二叉树前序遍历 <a class="header-anchor" href="#二叉树前序遍历" aria-label="Permalink to &quot;二叉树前序遍历&quot;">​</a></h2><p>遍历顺序：根节点---左子树---右子树</p><p><img src="'+s+'" alt="An image"></p><p>如上图，遍历结果是：1、2、4、5、7、8、3、6</p><p><img src="'+e+`" alt="An image"></p><p>如上图，遍历结果是：7、4、2、1、3、5、9、8、11、10、12</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">class</span><span style="color:#C3E88D;"> TreeNode{</span></span>
<span class="line"><span style="color:#FFCB6B;">    int</span><span style="color:#C3E88D;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">    TreeNode</span><span style="color:#C3E88D;"> left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">    TreeNode</span><span style="color:#C3E88D;"> right</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">    public</span><span style="color:#C3E88D;"> TreeNode</span><span style="color:#89DDFF;">()</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">    public</span><span style="color:#C3E88D;"> TreeNode</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">int</span><span style="color:#C3E88D;"> val</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> {</span></span>
<span class="line"><span style="color:#FFCB6B;">        this.val</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">    public</span><span style="color:#C3E88D;"> TreeNode</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">int</span><span style="color:#C3E88D;"> val,</span><span style="color:#C3E88D;"> TreeNode</span><span style="color:#C3E88D;"> left,</span><span style="color:#C3E88D;"> TreeNode</span><span style="color:#C3E88D;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> {</span></span>
<span class="line"><span style="color:#FFCB6B;">        this.val</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        this.left</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        this.right</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> right</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">    /**</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> 递归实现前序遍历</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> @param</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#C3E88D;">  树的根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">     */</span></span>
<span class="line"><span style="color:#FFCB6B;">    public</span><span style="color:#C3E88D;"> static</span><span style="color:#C3E88D;"> void</span><span style="color:#C3E88D;"> preOrder1</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 若根节点为空，直接返回</span></span>
<span class="line"><span style="color:#BABED8;">        if(</span><span style="color:#FFCB6B;">treeNode</span><span style="color:#C3E88D;"> ==</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#FFCB6B;">        //打印根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">        System.out.print(treeNode.val</span><span style="color:#C3E88D;"> +</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">\\t</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 遍历根节点的左子树</span></span>
<span class="line"><span style="color:#FFCB6B;">        preOrder1(treeNode.left</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 遍历根节点的右子树</span></span>
<span class="line"><span style="color:#FFCB6B;">        preOrder1(treeNode.right</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">    /**</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> 非递归实现前序遍历</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> @param</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#C3E88D;">  根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">     */</span></span>
<span class="line"><span style="color:#FFCB6B;">    public</span><span style="color:#C3E88D;"> static</span><span style="color:#C3E88D;"> void</span><span style="color:#C3E88D;"> preOrder2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 如果根节点为空，直接返回。</span></span>
<span class="line"><span style="color:#BABED8;">        if(</span><span style="color:#FFCB6B;">treeNode</span><span style="color:#C3E88D;"> ==</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 辅助栈</span></span>
<span class="line"><span style="color:#FFCB6B;">        Stack</span><span style="color:#BABED8;">&lt;TreeNode&gt; </span><span style="color:#C3E88D;">stack</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> new</span><span style="color:#C3E88D;"> Stack</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 根节点入栈</span></span>
<span class="line"><span style="color:#FFCB6B;">        stack.push(treeNode</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 当栈不为空</span></span>
<span class="line"><span style="color:#BABED8;">        while(</span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">stack.isEmpty</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#FFCB6B;">            //取出栈顶元素</span></span>
<span class="line"><span style="color:#FFCB6B;">            TreeNode</span><span style="color:#C3E88D;"> node</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> stack.pop</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#FFCB6B;">            //打印根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">            System.out.print(node.val</span><span style="color:#C3E88D;"> +</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">\\t</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">            //</span><span style="color:#C3E88D;"> 如果使用的是辅助栈，则先将根节点的右子节点入栈；如果是辅助队列，则先将根节点的左子节点入队列。因为栈是先进后出，队列是先进入=先出</span></span>
<span class="line"><span style="color:#BABED8;">            if(</span><span style="color:#FFCB6B;">node.right</span><span style="color:#C3E88D;"> !=</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#FFCB6B;">                stack.push(node.right</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">            }</span></span>
<span class="line"><span style="color:#FFCB6B;">            //</span><span style="color:#C3E88D;"> 根节点的右子节点入栈</span></span>
<span class="line"><span style="color:#BABED8;">            if(</span><span style="color:#FFCB6B;">node.left</span><span style="color:#C3E88D;"> !=</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#FFCB6B;">                stack.push(node.left</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">            }</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="二叉树中序遍历" tabindex="-1">二叉树中序遍历 <a class="header-anchor" href="#二叉树中序遍历" aria-label="Permalink to &quot;二叉树中序遍历&quot;">​</a></h2><p>遍历顺序：左子树---根节点---右子树</p><p><img src="`+s+'" alt="An image"></p><p>如上图，遍历结果是：4、2、7、5、8、1、3、6</p><p><img src="'+o+`" alt="An image"></p><p>遍历结果是：1、2、3、4、5、7、8、9、10、11、12 （升序）</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">    /**</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> 递归实现中序遍历</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> @param</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#C3E88D;">  树的根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">     */</span></span>
<span class="line"><span style="color:#FFCB6B;">    public</span><span style="color:#C3E88D;"> static</span><span style="color:#C3E88D;"> void</span><span style="color:#C3E88D;"> inOrder1</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 若根节点为空，直接返回</span></span>
<span class="line"><span style="color:#BABED8;">        if(</span><span style="color:#FFCB6B;">treeNode</span><span style="color:#C3E88D;"> ==</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 遍历根节点的左子树</span></span>
<span class="line"><span style="color:#FFCB6B;">        inOrder1(treeNode.left</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        //打印根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">        System.out.print(treeNode.val</span><span style="color:#C3E88D;"> +</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">\\t</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 遍历根节点的右子树</span></span>
<span class="line"><span style="color:#FFCB6B;">        inOrder1(treeNode.right</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">    /**</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> 非递归实现中序遍历</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> @param</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#C3E88D;">  根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">     */</span></span>
<span class="line"><span style="color:#FFCB6B;">    public</span><span style="color:#C3E88D;"> static</span><span style="color:#C3E88D;"> void</span><span style="color:#C3E88D;"> inOrder2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 如果根节点为空，直接返回。</span></span>
<span class="line"><span style="color:#BABED8;">        if(</span><span style="color:#FFCB6B;">treeNode</span><span style="color:#C3E88D;"> ==</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 辅助栈</span></span>
<span class="line"><span style="color:#FFCB6B;">        Stack</span><span style="color:#BABED8;">&lt;TreeNode&gt; </span><span style="color:#C3E88D;">stack</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> new</span><span style="color:#C3E88D;"> Stack</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 临时指针</span></span>
<span class="line"><span style="color:#FFCB6B;">        TreeNode</span><span style="color:#C3E88D;"> cur</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 当栈不为空</span></span>
<span class="line"><span style="color:#BABED8;">        while(</span><span style="color:#FFCB6B;">cur</span><span style="color:#C3E88D;"> !=</span><span style="color:#C3E88D;"> null</span><span style="color:#89DDFF;"> ||</span><span style="color:#82AAFF;"> !stack.isEmpty</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#FFCB6B;">            //</span><span style="color:#C3E88D;"> 左节点入栈</span></span>
<span class="line"><span style="color:#BABED8;">            while(</span><span style="color:#FFCB6B;">cur</span><span style="color:#C3E88D;"> !=</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#FFCB6B;">                stack.push(cur</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">                cur</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> cur.left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">            }</span></span>
<span class="line"><span style="color:#FFCB6B;">            //取出栈顶元素</span></span>
<span class="line"><span style="color:#FFCB6B;">            cur</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> stack.pop</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#FFCB6B;">            //打印左节点</span></span>
<span class="line"><span style="color:#FFCB6B;">            System.out.print(cur.val</span><span style="color:#C3E88D;"> +</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">\\t</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">            //</span><span style="color:#C3E88D;"> 指向右节点</span></span>
<span class="line"><span style="color:#FFCB6B;">            cur</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> cur.right</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="二叉树后序遍历" tabindex="-1">二叉树后序遍历 <a class="header-anchor" href="#二叉树后序遍历" aria-label="Permalink to &quot;二叉树后序遍历&quot;">​</a></h2><p>遍历顺序：左子树---右子树---根节点</p><p><img src="`+s+'" alt="An image"></p><p>如上图，遍历结果是：4、7、8、5、2、6、3、1</p><p><img src="'+r+`" alt="An image"></p><p>遍历结果是：1、3、2、5、4、8、10、12、11、9、7</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">    /**</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> 递归实现后序遍历</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> @param</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#C3E88D;">  树的根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">     */</span></span>
<span class="line"><span style="color:#FFCB6B;">    public</span><span style="color:#C3E88D;"> static</span><span style="color:#C3E88D;"> void</span><span style="color:#C3E88D;"> postOrder1</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 若根节点为空，直接返回</span></span>
<span class="line"><span style="color:#BABED8;">        if(</span><span style="color:#FFCB6B;">treeNode</span><span style="color:#C3E88D;"> ==</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 遍历根节点的左子树</span></span>
<span class="line"><span style="color:#FFCB6B;">        postOrder1(treeNode.left</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 遍历根节点的右子树</span></span>
<span class="line"><span style="color:#FFCB6B;">        postOrder1(treeNode.right</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        //打印根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">        System.out.print(treeNode.val</span><span style="color:#C3E88D;"> +</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">\\t</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">        /**</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> 非递归实现后序遍历</span></span>
<span class="line"><span style="color:#FFCB6B;">     *</span><span style="color:#C3E88D;"> @param</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#C3E88D;">  根节点</span></span>
<span class="line"><span style="color:#FFCB6B;">     */</span></span>
<span class="line"><span style="color:#FFCB6B;">    public</span><span style="color:#C3E88D;"> static</span><span style="color:#C3E88D;"> void</span><span style="color:#C3E88D;"> postOrder2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#C3E88D;"> treeNode</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 如果根节点为空，直接返回。</span></span>
<span class="line"><span style="color:#BABED8;">        if(</span><span style="color:#FFCB6B;">treeNode</span><span style="color:#C3E88D;"> ==</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 辅助栈</span></span>
<span class="line"><span style="color:#FFCB6B;">        Stack</span><span style="color:#BABED8;">&lt;TreeNode&gt; </span><span style="color:#C3E88D;">stack</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> new</span><span style="color:#C3E88D;"> Stack</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 临时指针</span></span>
<span class="line"><span style="color:#FFCB6B;">        TreeNode</span><span style="color:#C3E88D;"> cur</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> treeNode,</span><span style="color:#C3E88D;"> pre</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> null</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">        //</span><span style="color:#C3E88D;"> 当栈不为空</span></span>
<span class="line"><span style="color:#BABED8;">        while(</span><span style="color:#FFCB6B;">cur</span><span style="color:#C3E88D;"> !=</span><span style="color:#C3E88D;"> null</span><span style="color:#89DDFF;"> ||</span><span style="color:#82AAFF;"> !stack.isEmpty</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#FFCB6B;">            //</span><span style="color:#C3E88D;"> 左节点入栈</span></span>
<span class="line"><span style="color:#BABED8;">            while(</span><span style="color:#FFCB6B;">cur</span><span style="color:#C3E88D;"> !=</span><span style="color:#C3E88D;"> null</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#FFCB6B;">                stack.push(cur</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">                cur</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> cur.left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">            }</span></span>
<span class="line"><span style="color:#FFCB6B;">            //取出栈顶元素</span></span>
<span class="line"><span style="color:#FFCB6B;">            cur</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> stack.get</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">stack.size</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;">-1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">            if(cur.right</span><span style="color:#C3E88D;"> ==</span><span style="color:#C3E88D;"> null</span><span style="color:#89DDFF;"> ||</span><span style="color:#FFCB6B;"> pre</span><span style="color:#C3E88D;"> ==</span><span style="color:#C3E88D;"> cur.right</span><span style="color:#BABED8;">){</span></span>
<span class="line"><span style="color:#82AAFF;">                stack.pop</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#FFCB6B;">                System.out.print(cur.val</span><span style="color:#C3E88D;"> +</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">\\t</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">                pre</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> cur</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">                cur</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> null</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">            }</span><span style="color:#FFCB6B;">else</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">                //</span><span style="color:#C3E88D;"> 指向右节点</span></span>
<span class="line"><span style="color:#FFCB6B;">                cur</span><span style="color:#C3E88D;"> =</span><span style="color:#C3E88D;"> cur.right</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">            }</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div>`,23),y=[t];function i(F,D,B,b,C,u){return l(),a("div",null,y)}const d=n(c,[["render",i]]);export{m as __pageData,d as default};
