import{_ as e,c as a,o as s,a4 as t}from"./chunks/framework.CCJHkvW2.js";const b=JSON.parse('{"title":"linux 常用指令","description":"","frontmatter":{},"headers":[],"relativePath":"linux/常用指令.md","filePath":"linux/常用指令.md","lastUpdated":1706593029000}'),l={name:"linux/常用指令.md"},n=t(`<h1 id="linux-常用指令" tabindex="-1">linux 常用指令 <a class="header-anchor" href="#linux-常用指令" aria-label="Permalink to &quot;linux 常用指令&quot;">​</a></h1><h2 id="开放端口" tabindex="-1">开放端口 <a class="header-anchor" href="#开放端口" aria-label="Permalink to &quot;开放端口&quot;">​</a></h2><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">systemctl</span><span style="color:#C3E88D;"> start</span><span style="color:#C3E88D;"> firewalld</span></span>
<span class="line"><span style="color:#FFCB6B;">firewall-cmd</span><span style="color:#C3E88D;"> --zone=public</span><span style="color:#C3E88D;"> --add-port=1935/tcp</span><span style="color:#C3E88D;"> --permanent</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><table><thead><tr><th style="text-align:left;"><strong>参数</strong></th><th style="text-align:left;"><strong>注释</strong></th></tr></thead><tbody><tr><td style="text-align:left;">–zone=public</td><td style="text-align:left;">作用域，公开的</td></tr><tr><td style="text-align:left;">–add-port=1935/tcp</td><td style="text-align:left;">添加端口，格式为：端口/通讯协议</td></tr><tr><td style="text-align:left;">–permanent</td><td style="text-align:left;">永久生效，没有此参数重启后失效</td></tr></tbody></table><h2 id="du-sh-路径-查看路径下的文件大小总和" tabindex="-1">du -sh [路径] 查看路径下的文件大小总和 <a class="header-anchor" href="#du-sh-路径-查看路径下的文件大小总和" aria-label="Permalink to &quot;du -sh [路径] 查看路径下的文件大小总和&quot;">​</a></h2><p>每个文件</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">du</span><span style="color:#C3E88D;"> -sh</span><span style="color:#C3E88D;"> /var/lib/docker/</span><span style="color:#BABED8;">*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>最大文件</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">du</span><span style="color:#C3E88D;"> -h</span><span style="color:#C3E88D;"> --max-depth=1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="df-h-路径-查看路径下的各个文件大小和比例" tabindex="-1">df -h [路径] 查看路径下的各个文件大小和比例 <a class="header-anchor" href="#df-h-路径-查看路径下的各个文件大小和比例" aria-label="Permalink to &quot;df -h [路径] 查看路径下的各个文件大小和比例&quot;">​</a></h2><h2 id="docker-system-df-查看docker镜像及容器空间占比" tabindex="-1">docker system df 查看docker镜像及容器空间占比 <a class="header-anchor" href="#docker-system-df-查看docker镜像及容器空间占比" aria-label="Permalink to &quot;docker system df 查看docker镜像及容器空间占比&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>·Images:所有镜像占用的空间，包括拉取下来的镜像，和本地构建的</p><p>·Containers:运行的容器占用的空间，表示每个容器的读写层的空间。</p><p>·Local Volumes:容器挂载本地数据卷的空间。</p><p>·Build Cache:镜像构建过程中产生的缓存空间(只有在使用 BuildKit 时才有，Docker 18.09和最后的 RECLAIMABLE 是可回收大小。</p></div><h2 id="docker-system-prune-清除没用的空间-docker-image-container-volume-builder-prune" tabindex="-1">docker system prune 清除没用的空间 (docker image/container/volume/builder prune) <a class="header-anchor" href="#docker-system-prune-清除没用的空间-docker-image-container-volume-builder-prune" aria-label="Permalink to &quot;docker system prune 清除没用的空间 (docker image/container/volume/builder prune)&quot;">​</a></h2>`,13),r=[n];function o(d,i,p,c,u,h){return s(),a("div",null,r)}const y=e(l,[["render",o]]);export{b as __pageData,y as default};
