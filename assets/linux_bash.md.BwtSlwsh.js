import{_ as s,c as a,o as n,a4 as l,bZ as e,b_ as p}from"./chunks/framework.CCJHkvW2.js";const D=JSON.parse('{"title":"Bash","description":"","frontmatter":{},"headers":[],"relativePath":"linux/bash.md","filePath":"linux/bash.md","lastUpdated":1709263990000}'),o={name:"linux/bash.md"},i=l('<h1 id="bash" tabindex="-1">Bash <a class="header-anchor" href="#bash" aria-label="Permalink to &quot;Bash&quot;">​</a></h1><p>shell简介：sh命令就是shell，而我们知道shell的作用是什么？shell就是用来解释linux命令的，我们输入命令，指示linux帮我们做什么，而linux本身是看不懂我们输入的命令的，它只认识01，而事实显然不是如此， 那么在用户和linux之间必然有个桥梁起到了转换的作用，这里的桥梁就是shell。shell有很多种，常见的如：Bourne shell (sh)、C shell (csh) 和 Korn shell (ksh)。</p><p>Bourne shell 是 UNIX 最初使用的 shell,简称sh。</p><p>Linux 操作系统缺省的 shell 是Bourne Again shell，一看什么区别？多了个Again,即简称 bash。但是有的同学可能会问，我平常在linux用到的sh命令或者在shell脚本第一行写的“#!/bin/sh”都是指的Bourne shell吗，不是的。为什么呢？</p><p><img src="'+e+'" alt="An image"></p><p>看到了吧，linux中默认把/bin/sh 指向了/bin/bash,所以我们平常用的就是/bin/bash。至于sh和bash什么区别，顾名思义的来解释，多了个Again嘛，其实事实也是如此，bash扩展了sh，并继承吸收了csh和ksh的优点，知道这么多就够了。</p><p>说了那么多，来看看sh命令吧。</p><p>格式 ：sh [选项] 命令字符串或者shell脚本</p><div class="tip custom-block"><p class="custom-block-title">常见选项</p><p>-c :command 后面跟一个字符串，这个字符串可以是我们平常执行的任何命令，有参数选项时一定要用引号括起来</p><p>-x :后面跟shell脚本，可以详细的显示shell脚本的执行信息</p></div><p>eg:</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">sh</span><span style="color:#C3E88D;"> -c</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">java -jar /xxx.jar</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">sh</span><span style="color:#C3E88D;"> -c</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">ls -l</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>看下面的例子，<code>sh -c &quot;ls -l&quot;</code>等价于 ls -l <img src="'+p+`" alt="An image"></p><p>比如，现在我有个job.sh，实现的功能是每个一秒钟输出一句话，共输出十次，内容如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;"> $i </span><span style="color:#89DDFF;">-lt</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;"> ]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">现在i的值是：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">$i</span></span>
<span class="line"><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">=$((</span><span style="color:#BABED8;">$i+1</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#FFCB6B;">sleep</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">done</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当我执行命令“sh -x job.sh”来调试执行的时候输出什么信息呢？如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>+ i=0</span></span>
<span class="line"><span>+ &#39;[&#39; 0 -lt 10 &#39;]&#39;</span></span>
<span class="line"><span>+ echo $&#39;\\347\\216\\260\\345\\234\\250i\\347\\232\\204\\345\\200\\274\\346\\230\\257\\357\\274\\2320&#39;</span></span>
<span class="line"><span>  现在i的值是：0</span></span>
<span class="line"><span>+ i=1</span></span>
<span class="line"><span>+ sleep 1</span></span>
<span class="line"><span>+ &#39;[&#39; 1 -lt 10 &#39;]&#39;</span></span>
<span class="line"><span>+ echo $&#39;\\347\\216\\260\\345\\234\\250i\\347\\232\\204\\345\\200\\274\\346\\230\\257\\357\\274\\2321&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>现在i的值是：1</p><p>我这里没有全部粘贴过来，下面都是一样的了，我就不粘贴了，以&quot;+&quot;开头的就是调试的详细信息了，通过给sh命令知道-x选项，可以方便我们排查错误信息。</p>`,19),c=[i];function t(r,h,b,u,d,m){return n(),a("div",null,c)}const F=s(o,[["render",t]]);export{D as __pageData,F as default};
