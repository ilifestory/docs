import{_ as s,c as n,o as a,a4 as l,bp as p,bq as e,br as o,bs as t,bt as c}from"./chunks/framework.CCJHkvW2.js";const d=JSON.parse('{"title":"Zookeeper","description":"","frontmatter":{},"headers":[],"relativePath":"db/zookeeper.md","filePath":"db/zookeeper.md","lastUpdated":1713833896000}'),r={name:"db/zookeeper.md"},i=l('<h1 id="zookeeper" tabindex="-1">Zookeeper <a class="header-anchor" href="#zookeeper" aria-label="Permalink to &quot;Zookeeper&quot;">​</a></h1><p>参考文献(<a href="https://blog.csdn.net/weixin_38612401/article/details/125216821" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_38612401/article/details/125216821</a>)</p><p>首先需要了解zookeeper是什么，<code>zookeeper是一个分布式协调服务</code>。所谓分布式协调主要是来解决分布式系统中多个进程之间的同步限制，防止出现脏读，例如我们常说的分布式锁。 <img src="'+p+'" alt="An image"></p><h2 id="zk的集群是主从集群架构" tabindex="-1">zk的集群是主从集群架构 <a class="header-anchor" href="#zk的集群是主从集群架构" aria-label="Permalink to &quot;zk的集群是主从集群架构&quot;">​</a></h2><p><img src="'+e+'" alt="An image"></p><p>该图为zk集群的可用状态，从上图中可以看到，zk的集群是主从集群，客户端可以随意与任何zk服务节点进行连接，并且各个客户端都可以进行读写操作， <code>这是一个和redis主从集群的区别</code>，redis的主从集群，如果客户端是写操作，那么只能连接redis的主节点才可以。zk的每个客户端是随机连接到zk服务节点的， 并且每个客户端都可以进行读写操作，读操作都是在客户端连接的zk节点进行操作；而写操作是有区别的，如果该客户端连接的是leader节点，那么直接进行写操作； 如果该客户端连接的是follower节点，那么zk的服务节点会自动将该写操作转到leader节点进行。</p><p>zk的集群为主从集群，那么也就意味着主节点只有一个，那么当主节点挂了以后，该zk集群则会处于不可用状态，既然zk的设计目的是高可用，也就意味着当主节点挂了以后，zk会有一定的方式来快速的选出主节点， 让服务恢复可用状态，zk的官方文档中给出的压测报告，7台zk服务，选主耗时大概200ms。</p><p>介绍zk的选举流程之前需要先解释两个概念：zxid以及myid。zxid指的是当前节点的事物id，通俗点说就是当前节点完成的数据同步情况，该值越大，越能说明该节点的数据同步情况越完整， 丢失数据的情况越小或者丢失数据越少。myid是在创建zk集群的时候，我们给它的赋值。</p><p>zk的follower节点和leader节点是通过心跳，来查看服务是否可用。在这其中，只要有有一台follower节点发现主节点挂掉，他就开始向其它follower节点发送选主请求，整个集群进入选主流程，不再向外提供服务。</p><h2 id="选举" tabindex="-1">选举 <a class="header-anchor" href="#选举" aria-label="Permalink to &quot;选举&quot;">​</a></h2><p>先假设现在有4个zk节点，分别为node1，node2，node3，node4，他们的myid分别为1,2,3,4选主流程主要分为以下两种情况：</p><p>1.初始启动，在启动阶段时，此时各个服务节点的zxid都为0，只与myid有关。假设启动顺序为node1-&gt;node2-&gt;node3-&gt;node4，当启动动1和2的时候，该zk集群是不可用状态，因为zk的选主必须是过半服务节点同意（包含自己），最低需要启动三个节点才可以进行选举，因此只有node1和node2启动的时候，此时只有两台服务，不满足条件，当第三台节点启动以后，才满足了选主的最低条件，然后进入到选举流程，因为node3的myid最大，所以此时3号节点为leader，然后启动node4，由于此时已经选举出3位leader节点并且过半通过，则不再选取新的主节点。则该集群的leader节点为node3。</p><p>2.运行过程中，初始启动过程中的leader（node3）节点挂掉，假设此时只有node4节点发现leader已经挂掉，node1和node2的Zxid都是10，node4的Zxid为9，选主的时候需要比较zxid和myid，需要注意他们的优先级，zxid为第一优先级，myid为第二优先级，选举流程大致分为以下几步：</p><p>1)node4节点给自己投票，然后将自己的zxid和myid发送给node1和node2节点：</p><p><img src="'+o+'" alt="An image"></p><p>2）node1和node2通过比较zxid和myid，发现node4不能成为leader节点，将各自的zxid和myid发送给node4，然后node4接收到以后，发现node1和node2都比自己时候成为leader节点，会给它们进行投票</p><p><img src="'+t+'" alt="An image"></p><p>3）node1和node2反驳完node4的选主请求以后，开始进行各自的选主流程，起过程与node4的过程一致，通过上面的优先级，我们可以知道最终node2会成为leader节点，那么以node2为例说一下接下来的流程。node2首先给自己投票，然后将自己zxid和myid推送给node1和node4，此时会发现node2适合成为主节点，则会给node2节点进行投票，最终选出node2成为主节点，zk集群恢复成可用状态。</p><h2 id="zk数据一致性" tabindex="-1">zk数据一致性 <a class="header-anchor" href="#zk数据一致性" aria-label="Permalink to &quot;zk数据一致性&quot;">​</a></h2><p>zk服务一般是以集群状态提供服务，多个zk节点之间的数据一致性是通过zap（原子广播）协议来保证的。zk的数据一致性为最终一致性，需要注意的是他不是实时的， 比如node1，node2，node3，其中node3为leader，node1和node2为follower，当node1进行节点创建以后，leader节点肯定为实时更新，但是follower节点不一定为实时更新， 因为只要过半通过就算节点已经创建成功，可能会有的节点当前的数据还不是最终态，但是它的更新指令是存在，只是可能还没执行。我们的客户端如果想要读取最终态的数据，那么可以通过使用上面的sync命令，来获取最终数据。</p><p>先看一下下面的流程图，然后再进行详细解释：</p><p><img src="'+c+`" alt="An image"></p><p>1）首先由客户端发送创建节点的指令给到zk节点，假设这个zk节点为follower1节点；</p><p>2）follower1节点发现是写操作节点，则将该指令通过2888端口转发到leader节点执行；</p><p>3）leader节点更新自己zxid信息，也就是事务id信息；</p><p>4）leader节点先将创建节点信息同步到log日志中，然后再follower1和follower2各自的队列中放入创建节点写日志的指令，当follower节点接收到指令以后，执行写日志操作，写入日志成功以后，告诉leader写入完成；leader会判断目前是否已经有过半的节点（包含自己）已经写入完成，如果完成，则先在自己的内存中创建节点，然后将在follower对应的节点中加入在内存中创建节点的指令，然后follower接收到指令以后进行内存操作，操作完成以后告诉leader写入完成，同样需要过半完成；</p><p>5）将创建结束的消息返回给调用的follower，然后返回给客户端，节点创建结束。</p><p>上面步骤中的第四步其实就是对原子广播协议的一个大致解释，原子广播协议可以看成两部分，首先原子就代表这只有成功或者失败，没有中间状态；而广播就是并不意味着所有节点都完成相关操作才算完成，只要过半节点是成功的，那么本次操作就算成功完成了。在第四步中提到的队列就是对最终一致性的一个解释，leader会将所有指令按照顺序放入每个follower对应的队列中，每个follower按顺序去执行队列中的指令，达到一个最终一致性的结果。</p><h2 id="zk分布式锁" tabindex="-1">zk分布式锁 <a class="header-anchor" href="#zk分布式锁" aria-label="Permalink to &quot;zk分布式锁&quot;">​</a></h2><p>zk作为分布式协调服务，它的一个很大的作用就是用来实现分布式锁。zk节点存在临时节点，它的生命周期与session有关，它会随着session的消失而消失，这就比较完美的解决了使用redis作为分布式锁时可能出现的死锁问题。</p><p>下面看一下简单的分布式锁代码编写。</p><p>第一部分代码为连接zk时的watch代码，用于监测zk的连接情况，它只需要实现Watcher即可。可以根据不同连接状态，进行不同的处理，我们本次只关心连接状态，因为zk是异步连接， 为了保证zk连接成功以后再做接下来的加锁操作，通过CountDownLatch进行阻塞。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 连接watcher，主要用来监测zk连接状态</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> ConnectionWatch</span><span style="color:#C792EA;"> implements</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 由于zk获取信息为异步，通过countDownLatch进行阻塞，保证连接成功</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> CountDownLatch</span><span style="color:#BABED8;"> countDownLatch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> setCountDownLatch</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">CountDownLatch</span><span style="color:#BABED8;font-style:italic;"> countDownLatch</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">countDownLatch </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> countDownLatch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> process</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">WatchedEvent</span><span style="color:#BABED8;font-style:italic;"> watchedEvent</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">watchedEvent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        switch</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;">watchedEvent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getState</span><span style="color:#89DDFF;">()){</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> Unknown</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> Disconnected</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> NoSyncConnected</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> SyncConnected</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                // 连接成功，去除阻塞</span></span>
<span class="line"><span style="color:#BABED8;">                countDownLatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">countDown</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> AuthFailed</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> ConnectedReadOnly</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> SaslAuthenticated</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> Expired</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> Closed</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>第二部分代码为zk的工具类，用于获取zk实例，用于业务代码调用。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> ZkUtils</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> static</span><span style="color:#C792EA;"> volatile</span><span style="color:#C792EA;"> ZooKeeper</span><span style="color:#BABED8;"> zooKeeper</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * zk服务器节点地址，以及锁的主目录</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      */</span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> final</span><span style="color:#C792EA;"> static</span><span style="color:#C792EA;"> String</span><span style="color:#BABED8;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181/orderLock</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> static</span><span style="color:#C792EA;"> ConnectionWatch</span><span style="color:#BABED8;"> watch </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#82AAFF;"> ConnectionWatch</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> static</span><span style="color:#C792EA;"> CountDownLatch</span><span style="color:#BABED8;"> countDownLatch </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#82AAFF;"> CountDownLatch</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 采创建zk</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@return</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@throws</span><span style="color:#FFCB6B;font-style:italic;"> IOException</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@throws</span><span style="color:#FFCB6B;font-style:italic;"> InterruptedException</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> static</span><span style="color:#C792EA;"> ZooKeeper</span><span style="color:#82AAFF;"> getInstance</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> throws</span><span style="color:#C792EA;"> IOException</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> InterruptedException</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        watch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setCountDownLatch</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">countDownLatch</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 创建zk实例，1000代表的是session过期时间</span></span>
<span class="line"><span style="color:#BABED8;">        zooKeeper </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#82AAFF;"> ZooKeeper</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1000</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> watch</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 在zk连接成功之前进行阻塞</span></span>
<span class="line"><span style="color:#BABED8;">        countDownLatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">await</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> zooKeeper</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>第三部分为在加锁过程中相关操作的watch以及callback操作，主要功能有创建节点，获取子节点，检查节点是否存在。zk的加锁过程就是创建节点的过程，当创建节点成功并且成功返回， 则证明该线程加锁成功，继续进行业务逻辑处理，在加锁的时候，一定要考虑锁的可重入性。下面这段代码实现的是公平锁，谁先创建了临时节点，那么谁就能先获得锁。加锁的大致逻辑是：</p><p>1）先创建带有序列的临时节点；</p><p>2）在回调函数中获取父节点的所有子节点，判断当前线程创建的临时节点是否位于第一个，如果是则获取锁，如果不是则判断前一个节点是否存在，然后一直循环该逻辑。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> LockWatch</span><span style="color:#C792EA;"> implements</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> AsyncCallback</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">StringCallback</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> AsyncCallback</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Children2Callback</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> AsyncCallback</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">StatCallback</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> ZooKeeper</span><span style="color:#BABED8;"> zooKeeper</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 当前线程名称</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      */</span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> String</span><span style="color:#BABED8;"> threadName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 当前线程创建的节点名称</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> String</span><span style="color:#BABED8;"> nodeName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 用来进行锁阻塞，只有获取到锁，才放行，否则进行阻塞</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> CountDownLatch</span><span style="color:#BABED8;"> countDownLatch </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#82AAFF;"> CountDownLatch</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> setZooKeeper</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ZooKeeper</span><span style="color:#BABED8;font-style:italic;"> zooKeeper</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">zooKeeper </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> zooKeeper</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> setThreadName</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#BABED8;font-style:italic;"> threadName</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">threadName </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> threadName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 加锁操作，也就是往zk的指定目录下插入带有序列的临时节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 需要考虑锁的可重入</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> tryLock</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> throws</span><span style="color:#C792EA;"> InterruptedException</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        zooKeeper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/lock</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> threadName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBytes</span><span style="color:#89DDFF;">(),</span><span style="color:#BABED8;"> ZooDefs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Ids</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">OPEN_ACL_UNSAFE</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> CreateMode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">EPHEMERAL_SEQUENTIAL</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        this,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">orderLock</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">        countDownLatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">await</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 解锁操作</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@throws</span><span style="color:#FFCB6B;font-style:italic;"> InterruptedException</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@throws</span><span style="color:#FFCB6B;font-style:italic;"> KeeperException</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> unLock</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> throws</span><span style="color:#C792EA;"> InterruptedException</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> KeeperException</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // -1代表不考虑版本号，在zk中获取，删除等相关操作允许版本号的传入</span></span>
<span class="line"><span style="color:#BABED8;">        zooKeeper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">delete</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">nodeName</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 节点创建回调方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> i</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> path</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> ctx</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> name</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> processResult</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;font-style:italic;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> String</span><span style="color:#BABED8;font-style:italic;"> path</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> Object</span><span style="color:#BABED8;font-style:italic;"> ctx</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> String</span><span style="color:#BABED8;font-style:italic;"> name</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;">Objects</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nonNull</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> !</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">)){</span></span>
<span class="line"><span style="color:#BABED8;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">threadName </span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;"> create node:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">            nodeName </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">            zooKeeper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getChildren</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> false,</span><span style="color:#89DDFF;"> this,</span><span style="color:#BABED8;"> ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 获取子节点信息的回调方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> i</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> path</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> o</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> children</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> stat</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> processResult</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;font-style:italic;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> String</span><span style="color:#BABED8;font-style:italic;"> path</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> Object</span><span style="color:#BABED8;font-style:italic;"> o</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;font-style:italic;"> children</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> Stat</span><span style="color:#BABED8;font-style:italic;"> stat</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;">children </span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;"> null</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> children</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isEmpty</span><span style="color:#89DDFF;">()){</span></span>
<span class="line"><span style="color:#BABED8;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">children is null......</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 将子节点进行排序，找序号由低到高</span></span>
<span class="line"><span style="color:#BABED8;">        Collections</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">children</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 获取当前创建节点排序以后的下标</span></span>
<span class="line"><span style="color:#C792EA;">        int</span><span style="color:#BABED8;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> children</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">nodeName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 如果当前节点为第一个节点，则加锁成功</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        try</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            if</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;">index </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#BABED8;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">threadName </span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> get lock...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                // -1代表不考虑版本</span></span>
<span class="line"><span style="color:#BABED8;">                zooKeeper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setData</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> threadName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBytes</span><span style="color:#89DDFF;">(),</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">                countDownLatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">countDown</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">            }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">threadName </span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> not get lock...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                // 判断该节点的前一个节点是否存在，目的是为了注册节点监控事件，监测删除节点操作</span></span>
<span class="line"><span style="color:#BABED8;">                zooKeeper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exists</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> children</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span><span style="color:#89DDFF;"> this,</span><span style="color:#89DDFF;"> this,</span><span style="color:#BABED8;"> o</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">            }</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span><span style="color:#89DDFF;font-style:italic;"> catch</span><span style="color:#89DDFF;"> (</span><span style="color:#C792EA;">KeeperException</span><span style="color:#BABED8;font-style:italic;"> e</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">            e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span><span style="color:#89DDFF;font-style:italic;"> catch</span><span style="color:#89DDFF;"> (</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#BABED8;font-style:italic;"> e</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">            e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 判断节点是否存在的watch方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> watchedEvent</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> process</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">WatchedEvent</span><span style="color:#BABED8;font-style:italic;"> watchedEvent</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        switch</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;">watchedEvent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getType</span><span style="color:#89DDFF;">()){</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> None</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> NodeCreated</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> NodeDeleted</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                // 当节点删除的时候，代表着解锁，触发后续的抢锁操作</span></span>
<span class="line"><span style="color:#BABED8;">                zooKeeper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getChildren</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> false,</span><span style="color:#89DDFF;"> this,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">orderLock</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> NodeDataChanged</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> NodeChildrenChanged</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> DataWatchRemoved</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> ChildWatchRemoved</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            case</span><span style="color:#BABED8;"> PersistentWatchRemoved</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 校验节点是否存在回调方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> i</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> s</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> o</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#BABED8;font-style:italic;"> stat</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> processResult</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;font-style:italic;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> String</span><span style="color:#BABED8;font-style:italic;"> s</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> Object</span><span style="color:#BABED8;font-style:italic;"> o</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> Stat</span><span style="color:#BABED8;font-style:italic;"> stat</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br></div></div><p>第四部分则为锁的简单应用，使用了junit进行测试，代码如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> ZkLock</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> ZooKeeper</span><span style="color:#BABED8;"> zooKeeper</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 没有业务意义，只是为了阻塞主线程</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> CountDownLatch</span><span style="color:#BABED8;"> countDownLatch </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#82AAFF;"> CountDownLatch</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 初始化的时候，首先保证获取到zk的链接实例</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@throws</span><span style="color:#FFCB6B;font-style:italic;"> IOException</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@throws</span><span style="color:#FFCB6B;font-style:italic;"> InterruptedException</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#C792EA;">BeforeAll</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> connect</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> throws</span><span style="color:#C792EA;"> IOException</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> InterruptedException</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        zooKeeper </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> ZkUtils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 使用完以后，关闭zk连接</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#F78C6C;font-style:italic;">@throws</span><span style="color:#FFCB6B;font-style:italic;"> InterruptedException</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#C792EA;">AfterAll</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> close</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> throws</span><span style="color:#C792EA;"> InterruptedException</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        zooKeeper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 使用10个线程模拟抢锁</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> testLock</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> throws</span><span style="color:#C792EA;"> InterruptedException</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            new</span><span style="color:#82AAFF;"> Thread</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">                @</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">                public</span><span style="color:#C792EA;"> void</span><span style="color:#82AAFF;"> run</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">                    String</span><span style="color:#BABED8;"> threadName </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">                    LockWatch</span><span style="color:#BABED8;"> lockWatch </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#82AAFF;"> LockWatch</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#BABED8;">                    lockWatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setThreadName</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">threadName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">                    lockWatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setZooKeeper</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">zooKeeper</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                    try</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">                        lockWatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tryLock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#BABED8;">                        System</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">threadName </span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">deal business...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">                        lockWatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unLock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">                    }</span><span style="color:#89DDFF;font-style:italic;"> catch</span><span style="color:#89DDFF;"> (</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#89DDFF;"> |</span><span style="color:#C792EA;"> KeeperException</span><span style="color:#BABED8;font-style:italic;"> e</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">                        e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">                    }</span></span>
<span class="line"><span style="color:#89DDFF;">                }</span></span>
<span class="line"><span style="color:#89DDFF;">            }.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">        countDownLatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">await</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">注</p><p>补充：zk服务中，2888端口用于follower调用leader进行写操作，3888端口为选主使用端口，2181端口为客户端连接zk服务节点端口。</p></div>`,42),y=[i];function D(F,b,A,E,u,B){return a(),n("div",null,y)}const f=s(r,[["render",D]]);export{d as __pageData,f as default};
