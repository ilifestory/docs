import{_ as e,c as a,o as t,a4 as i}from"./chunks/framework.CCJHkvW2.js";const v=JSON.parse('{"title":"Vue","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue.md","filePath":"vue/vue.md","lastUpdated":1715332530000}'),o={name:"vue/vue.md"},s=i('<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><p>node.js就像Java npm就像Maven Vue就像Spring Boot vite就像webpackage/maven</p><p>Vue和Vite的关系如下：</p><p>Vue是一个流行的JavaScript前端框架，用于构建用户界面，是构建应用程序的核心框架。它提供了一整套工具和库，帮助开发者构建高效、可扩展的单页面应用程序（SPA）。 Vue使用基于组件的开发模式，可将应用程序拆分为独立的、可重用的组件，并通过组合组件来构建复杂的用户界面。</p><p>Vite则是一个专为Vue设计的现代化前端构建工具，目标是提供快速的开发体验。Vite使用原生ES模块作为开发服务器的热模块替换（HMR）的基础，能够实现非常快速的冷启动和热更新。 与传统的打包工具相比，Vite按需编译和提供模块，这种方式可以大大提高开发过程中的速度。</p><p>总的来说，Vue用于构建应用程序，而Vite则用于加速Vue应用程序的开发过程。</p><h2 id="async-await" tabindex="-1">async/await <a class="header-anchor" href="#async-await" aria-label="Permalink to &quot;async/await&quot;">​</a></h2><p>async 会将后面函数的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。</p>',8),n=[s];function r(c,p,u,_,d,l){return t(),a("div",null,n)}const h=e(o,[["render",r]]);export{v as __pageData,h as default};
