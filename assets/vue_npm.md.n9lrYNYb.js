import{_ as t,c as e,o as a,a4 as n}from"./chunks/framework.CCJHkvW2.js";const f=JSON.parse('{"title":"npm","description":"","frontmatter":{},"headers":[],"relativePath":"vue/npm.md","filePath":"vue/npm.md","lastUpdated":1715332530000}'),l={name:"vue/npm.md"},s=n('<h1 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h1><h2 id="什么是npm" tabindex="-1">什么是npm <a class="header-anchor" href="#什么是npm" aria-label="Permalink to &quot;什么是npm&quot;">​</a></h2><p>node.js就像Java npm就像Maven Vue就像Spring Boot vite就像webpackage/maven</p><p>Vue和Vite的关系如下：1</p><p>Vue是一个流行的JavaScript前端框架，用于构建用户界面，是构建应用程序的核心框架。它提供了一整套工具和库，帮助开发者构建高效、可扩展的单页面应用程序（SPA）。Vue使用基于组件的开发模式，可将应用程序拆分为独立的、可重用的组件，并通过组合组件来构建复杂的用户界面。</p><p>Vite则是一个专为Vue设计的现代化前端构建工具，目标是提供快速的开发体验。Vite使用原生ES模块作为开发服务器的热模块替换（HMR）的基础，能够实现非常快速的冷启动和热更新。与传统的打包工具相比，Vite按需编译和提供模块，这种方式可以大大提高开发过程中的速度。</p><p>总的来说，Vue用于构建应用程序，而Vite则用于加速Vue应用程序的开发过程。</p><p>npm (全称Node PackageManager，即node包管理器)是Node.js默认的、以JavaScript编写的软件包管理系统npm来分享和使用代码已经成了前端的标配</p><p>npm 是 JavaScript 世界的包管理工具,并且是 Node.js 平台的默认包管理工具，也是世界上最大的软件注册表，里面包含超过600000 个 包的结构，能够使您轻松跟踪依赖项和版本。</p><p>npm 是 Node.js 的包管理工具，用来安装各种 Node.js 的扩展。</p><p>npm 是 JavaScript 的包管理工具，也是世界上最大的软件注册表。有超过 60 万个 JavaScript 代码包可供下载，每周下载约 30 亿次。npm 让 JavaScript 开发人员可以轻松地使用其他开发人员共享的代码。</p><p>npm 的全称是Node Package Manager，是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</p><p>npm 由三个不同的部分组成：</p><p>网站</p><p>注册表</p><p>命令行界面（CLI）</p><h2 id="npm的安装和使用" tabindex="-1">npm的安装和使用 <a class="header-anchor" href="#npm的安装和使用" aria-label="Permalink to &quot;npm的安装和使用&quot;">​</a></h2><p>安装</p><p>npm是Node.js默认的软件包管理系统</p><p>安装完毕node后，会默认安装好npm。</p><p>npm本身也是基于Node.js开发的软件</p><p>下载Node地址: <a href="http://nodejs.cn" target="_blank" rel="noreferrer">http://nodejs.cn</a></p><p>判断是否安装成功：</p><p>输入node -v，如果成功安装Node.js，会获取到相应的版本号</p><p>输入npm -v，会获取到npm的版本号</p><h2 id="安装第三方包" tabindex="-1">安装第三方包 <a class="header-anchor" href="#安装第三方包" aria-label="Permalink to &quot;安装第三方包&quot;">​</a></h2><table><thead><tr><th style="text-align:left;"><strong>指令</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">npm -V</td><td style="text-align:left;">通过查看版本，看npm是否安装成功</td></tr><tr><td style="text-align:left;">npm install [Module Name]</td><td style="text-align:left;">[Module Name]使用npm 命令安装模块 安装模块到项目目录下 不会修改package.json文件 运行 npm install 初始化项目时不会下载模块</td></tr><tr><td style="text-align:left;">npm install [Module Name] -g</td><td style="text-align:left;">-g 将模块安装到全局， 不会在项目node_modules目录中保存模块包。不会修改package.json文件。 运行 npm install 初始化项目时不会下载模块。具体安装到磁盘哪个位置，要看npm config prefix的位置。查看：npm config ls,修改：npm config set prefix.</td></tr><tr><td style="text-align:left;">npm list -g</td><td style="text-align:left;">查看所有全局安装的模块</td></tr><tr><td style="text-align:left;">npm list vue</td><td style="text-align:left;">查看某个模块的版本号</td></tr><tr><td style="text-align:left;">npm -g install npm@5.9.1</td><td style="text-align:left;">(@后跟版本号)这样我们就可以更新npm版本</td></tr><tr><td style="text-align:left;">npm install -save [Module Name]</td><td style="text-align:left;">-save 在package文件的dependencies节点写入依赖 安装模块到项目node_modules目录下。 运行 npm install 初始化项目时，会将模块下载到项目目录下。运行npm install --production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。 -save 将模块安装到项目目录下，并在package文件的dependencies属性写入依赖。</td></tr><tr><td style="text-align:left;">npm install -save-dev [Module Name]</td><td style="text-align:left;">-save-dev 在package文件的devDependencies节点写入依赖 安装模块到项目node_modules目录下。运行 npm install 初始化项目时，会将模块下载到项目目录下。运行npm install --production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。 -save-dev 将模块安装到项目目录下，并在package文件的devDependencies属性写入依赖。</td></tr><tr><td style="text-align:left;">dependencies:</td><td style="text-align:left;">运行时的依赖，发布后，即生产环境下还需要用的模块</td></tr><tr><td style="text-align:left;">devDependencies:</td><td style="text-align:left;">开发时的依赖。里面的模块是开发时用的，发布时用不到它,比如项目中使用的 gulp ，压缩css.is的模块。这些模块在我们的项目部署后是不需要的</td></tr></tbody></table><p>npm install --registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noreferrer">https://registry.npm.taobao.org</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>使用原则:运行时需要用到的包使用–save，否则使用–save-dev。</p><p>devDependencies 属性下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。</p><p>像 express 这些模块是项目运行必备的，应该安装在 dependencies 属性下，所以我们应该使用 -save 的形式安装。</p><h2 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;yarn&quot;">​</a></h2><p>yarn是什么？</p><p>&quot;Yarn是由Facebook、Google、Exponent和Tilde联合推出了一个新的JS包管理工具，正如官方文档中写的， Yarn是为了弥补npm的一些缺陷而出现的。</p><table><thead><tr><th style="text-align:left;"><strong>指令</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">yarn init</td><td style="text-align:left;">初始化项目同npm init，执行输入信息后，会生成packagejson文件</td></tr><tr><td style="text-align:left;">yarn install</td><td style="text-align:left;">安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock</td></tr><tr><td style="text-align:left;">yarn install --flat</td><td style="text-align:left;">安装一个包的单一版本</td></tr><tr><td style="text-align:left;">yarn install --force</td><td style="text-align:left;">制重新下载所有包</td></tr><tr><td style="text-align:left;">yarn install --production</td><td style="text-align:left;">只安装dependencies里的包</td></tr><tr><td style="text-align:left;">yarn install --no-lockfile</td><td style="text-align:left;">不读取或生成yarn.lock</td></tr><tr><td style="text-align:left;">yarn install --pure-lockfile</td><td style="text-align:left;">不生成yarn.lock</td></tr><tr><td style="text-align:left;">yarn add [package]</td><td style="text-align:left;">在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中</td></tr><tr><td style="text-align:left;">yarn add [package]@[version]</td><td style="text-align:left;">安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数</td></tr><tr><td style="text-align:left;">yarn add [package]@[tag]</td><td style="text-align:left;">安装某个tag (比如beta,next或者latest)</td></tr><tr><td style="text-align:left;">yarn add --dev/-D</td><td style="text-align:left;">加到 devDependencies</td></tr><tr><td style="text-align:left;">yarn add --peer/-P</td><td style="text-align:left;">加到 peerDependencies</td></tr><tr><td style="text-align:left;">yarn add --optional/-0</td><td style="text-align:left;">加到optionalDependencies</td></tr></tbody></table><h2 id="yarn的优点" tabindex="-1">yarn的优点 <a class="header-anchor" href="#yarn的优点" aria-label="Permalink to &quot;yarn的优点&quot;">​</a></h2><p>速度快： npm要等上一个package安装完之后再安装下一个。yarn并行安装，多个package一起安装。如果之前安装过一个软件包，yarn再次安装时会从缓存中获取。npm需要从网络下载。</p><p>安装版本统一： yarn默认生成一个锁定文件lock。file记录了安装上的模块的版本号。每一次拉取项目的时候都是一样的模块版本。</p><p>更简洁的输出： npm 的输出信息比较冗长。在执行 npm install 的时候，命令行里会不断地打印出所有被安装上的依赖。</p><p>简洁太多：默认情况下，结合了 emoji直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。</p><p>多注册来源处理： 所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。</p><p>更好的语义化： yarn改变了一些npm命令的名称，比如 yarn add/remove，感觉上比 npm 原本的 install/uninstall 要更清晰。</p><p>安装</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#C3E88D;"> install</span><span style="color:#C3E88D;"> --global</span><span style="color:#C3E88D;"> yarn</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>更新</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#C3E88D;"> set</span><span style="color:#C3E88D;"> version</span><span style="color:#C3E88D;"> stable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',47),p=[s];function d(r,i,o,c,g,m){return a(),e("div",null,p)}const h=t(l,[["render",d]]);export{f as __pageData,h as default};
