import{_ as a,c as e,o as t,a4 as x}from"./chunks/framework.CCJHkvW2.js";const l=JSON.parse('{"title":"高阶导数","description":"","frontmatter":{},"headers":[],"relativePath":"高数/高阶导数.md","filePath":"高数/高阶导数.md","lastUpdated":1708482714000}'),r={name:"高数/高阶导数.md"},o=x('<h1 id="高阶导数" tabindex="-1">高阶导数 <a class="header-anchor" href="#高阶导数" aria-label="Permalink to &quot;高阶导数&quot;">​</a></h1><h2 id="数学归纳法" tabindex="-1">数学归纳法 <a class="header-anchor" href="#数学归纳法" aria-label="Permalink to &quot;数学归纳法&quot;">​</a></h2><h2 id="牛顿公式" tabindex="-1">牛顿公式 <a class="header-anchor" href="#牛顿公式" aria-label="Permalink to &quot;牛顿公式&quot;">​</a></h2><p>(μ * ν)⁽ⁿ⁾ = Cₙ⁰ μ⁽ⁿ⁾ ν + Cₙ¹μ⁽ⁿ⁻¹⁾ ν⁽¹⁾ + Cₙ¹μ⁽ⁿ⁻²⁾ ν⁽²⁾ + ... + Cₙⁿ⁻¹ μ⁽¹⁾ ν⁽ⁿ⁻¹⁾ + Cₙⁿ μ ν⁽ⁿ⁾</p><p>帮助记忆</p><p>(μ * ν)&#39; = μ&#39;v + μv&#39;</p><h2 id="泰勒公式" tabindex="-1">泰勒公式 <a class="header-anchor" href="#泰勒公式" aria-label="Permalink to &quot;泰勒公式&quot;">​</a></h2><p>f(x) = f(x₀) + f(x₀)&#39; * (x - x₀)¹ / 1! + f(x₀)&#39;&#39; * (x - x₀)² / 2! + f(x₀)⁽ⁿ⁾ * (x - x₀)ⁿ / n! + f(ξ)ⁿ⁺¹ * (x - x₀)ⁿ⁺¹ / (n+1)!</p><p>若 x -&gt; x₀ 则</p><p>f(x) = f(x₀) + f(x₀)&#39; * (x - x₀)¹ / 1! + f(x₀)&#39;&#39; * (x - x₀)² / 2! + f(x₀)⁽ⁿ⁾ * (x - x₀)ⁿ / n! + ○(x-x₀)ⁿ</p><p>令 x₀ = 0</p><p>f(x) = f(0) + f(0)&#39; * x¹ / 1! + f(0)&#39;&#39; * x² / 2! + f(0)⁽ⁿ⁾ * xⁿ / n! + f(ξ)ⁿ⁺¹ * xⁿ⁺¹ / (n+1)!</p><p>若 x -&gt; 0 则</p><p>f(x) = f(0) + f(0)&#39; * x¹ / 1! + f(0)&#39;&#39; * x² / 2! + f(0)⁽ⁿ⁾ * xⁿ / n! + ○(xⁿ)</p><p>就是等价无穷小的泰勒公式使用</p>',15),n=[o];function f(p,_,s,i,c,d){return t(),e("div",null,n)}const m=a(r,[["render",f]]);export{l as __pageData,m as default};
